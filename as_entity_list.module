<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\Query;
use Drupal\Core\Database\Database;

// need to figure out how to combine person and articles lookup
// need to refine and/or in entity queries


function as_entity_list_get_articles($count,$tags)
{
 //use entity query to look up article nids filtered by tags
  $query = \Drupal::entityQuery('node', $conjunction = 'AND')
    ->accessCheck(TRUE)
    ->condition('type', 'article')
    ->condition('status', 1)
    ->sort('created', 'DESC') 
    ->range(0, $count);
    if(isset($tags) && $tags != NULL) {
      $query->condition('field_article_view_tags.entity',$tags);  
        }
  $nids= $query->execute();

  return $nids;
}

function as_entity_list_get_articles_as($count,$tags)
{
 //use entity query to look up a specific number article nids filtered by term references
  if(isset($tags) && $tags != NULL) {
    //$tids = explode(',', $tags[0]['tids']);
    //$vid = $tags[0]['vid'];
    $termvariables = $tags[0]['termvariables'];
    $operator = $tags[0]['operator'];
    $sort = $tags[0]['sort'];
    $query = \Drupal::entityQuery('node')
      ->accessCheck(TRUE)
      ->condition('type', 'article')
      ->condition('status', 1);
      if($sort == 'latest'){
        $query->sort('created', 'DESC');
        $query->range(0, $count);
      }
      if($sort == 'oldest'){
        $query->sort('created', 'ASC');
        $query->range(0, $count);
      }
      if($sort == 'random'){
        // get more for random, to make sure it's really random
        $query->range(0, 500);
      }
        
      //foreach ($tids as $tid) {
      foreach ($termvariables as $term) {
        if($term['vid'] == 'tags'){
          if($operator == 'and'){
            $query->condition($query->andConditionGroup()
            ->condition('field_tags.entity', $term['tid']));
          }
          if($operator == 'or'){
            $query->condition($query->orConditionGroup()
            ->condition('field_tags.entity', $term['tid']));
          }
        }
        if($term['vid'] == 'departments_programs'){
          if($operator == 'and'){
            $query->condition($query->andConditionGroup()
            ->condition('field_department_program.entity', $term['tid']));
          }
          if($operator == 'or'){
            $query->condition($query->orConditionGroup()
            ->condition('field_department_program.entity', $term['tid']));
          }
        }
        if($term['vid'] == 'function'){
          if($operator == 'and'){
            $query->condition($query->andConditionGroup()
            ->condition('field_related_functions.entity', $term['tid']));
          }
          if($operator == 'or'){
            $query->condition($query->orConditionGroup()
            ->condition('field_related_functions.entity', $term['tid']));
          }
        }
        if($term['vid'] == 'article_bylines'){
          if($operator == 'and'){
            $query->condition($query->andConditionGroup()
            ->condition('field_byline_reference.entity', $term['tid']));
          }
          if($operator == 'or'){
            $query->condition($query->orConditionGroup()
            ->condition('field_byline_reference.entity', $term['tid']));
          }
        }
        if($term['vid']== 'article_mediasources'){
          if($operator == 'and'){
            $query->condition($query->andConditionGroup()
            ->condition('field_media_source_reference.entity', $term['tid']));
          }
          if($operator == 'or'){
            $query->condition($query->orConditionGroup()
            ->condition('field_media_source_reference.entity', $term['tid']));
          }
        }
      }
    
    $nids = $query->execute();
  }

  if($sort == 'random'){
    // randomize array
    $random = shuffle($nids);
    // chop back down to requested list size
    $nids = array_slice($nids, 0, $count);
  }
  
  return $nids;
}

function as_entity_list_get_terms_as($type,$count,$tags)
{
 //use entity query to look up a specific number taxonomy term tids filtered by term references
  if ($type == 'dpc_as'){
    $vname = 'departments_programs';
  }
  if ($type == 'mmg_as'){
    $vname = 'majors_minors_gradfields';
  }
  if(isset($tags) && $tags != NULL) {
    //$tids = explode(',', $tags[0]['tids']);
    //$vid = $tags[0]['vid'];
    $termvariables = $tags[0]['termvariables'];
    $operator = $tags[0]['operator'];
    $sort = $tags[0]['sort'];
    $query = \Drupal::entityQuery('taxonomy_term')
      ->accessCheck(TRUE)
      ->condition('vid', $vname)
      ->condition('status', 1);
      if($sort == 'alphabetical'){
        $query->sort('name', 'ASC');
        $query->range(0, $count);
      }
      if($sort == 'random'){
        // get more for random, to make sure it's really random
        $query->range(0, 500);
      }

      //foreach ($tids as $tid) {
      foreach ($termvariables as $term) {
        if($term['vid'] == 'department_type'){
          if($operator == 'and'){
            $query->condition($query->andConditionGroup()
            ->condition('field_type.entity', $term['tid']));
          }
          if($operator == 'or'){
            $query->condition($query->orConditionGroup()
            ->condition('field_type.entity', $term['tid']));
          }
        }
        if($term['vid'] == 'discipline'){
          if($operator == 'and'){
            $query->condition($query->andConditionGroup()
            ->condition('field_discipline.entity', $term['tid']));
          }
          if($operator == 'or'){
            $query->condition($query->orConditionGroup()
            ->condition('field_discipline.entity', $term['tid']));
          }
        }
        if($term['vid'] == 'function'){
          if($operator == 'and'){
            $query->condition($query->andConditionGroup()
            ->condition('field_related_functions.entity', $term['tid']));
          }
          if($operator == 'or'){
            $query->condition($query->orConditionGroup()
            ->condition('field_related_functions.entity', $term['tid']));
          }
        } 
        if($term['vid'] == 'interests'){
          if($operator == 'and'){
            $query->condition($query->andConditionGroup()
            ->condition('field_interests.entity', $term['tid']));
          }
          if($operator == 'or'){
            $query->condition($query->orConditionGroup()
            ->condition('field_interests.entity', $term['tid']));
          }
        }
        if($term['vid']== 'level'){
          if($operator == 'and'){
            $query->condition($query->andConditionGroup()
            ->condition('field_level.entity', $term['tid']));
          }
          if($term['vid'] == 'or'){
            $query->condition($query->orConditionGroup()
            ->condition('field_level.entity', $term['tid']));
          }
        }
      }
    
    $terms = $query->execute();
  }

  if($sort == 'random'){
    // randomize array
    $random = shuffle($terms);
    // chop back down to requested list size
    $terms = array_slice($terms, 0, $count);
  }
  
  return $terms;
}

function as_entity_list_get_articles_footer($count,$nid)
{
 //use entity query to look up article nids to display in footer of article, excludes current nid
  $query = \Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'article')
    ->condition('status', 1)
    // don't include this nid
    ->condition('nid', $nid, '<>')
    ->sort('created', 'DESC') 
    ->range(0, $count);
  $nids= $query->execute();
  return $nids;
}

function as_entity_list_get_articles_person($count,$nid)
{
 //use entity query to look up article nids with related people containing current nid
  $query = \Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'article')
    ->condition('status', 1)
    // only if related people contains nid
    ->condition('field_related_people.entity',$nid)
    ->sort('created', 'DESC') 
    ->range(0, $count);
  $nids= $query->execute();
  return $nids;
}

function as_entity_list_get_articles_person_as($count,$nid)
{
 //use entity query to look up article nids with related people containing current nid
  $query = \Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'article')
    ->condition('status', 1)
    // only if related people node contains nid
    ->condition('field_related_people_nodes.entity',$nid)
    ->sort('created', 'DESC') 
    ->range(0, $count);
  $nids= $query->execute();
  return $nids;
}

function as_entity_list_get_articles_department($count,$tags)
{
 //use entity query to look up article nids with related departments tid
  $query = \Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'article')
    ->condition('status', 1)
    // only if related departments contains tid
    ->condition('field_department_program.entity',$tags)
    ->sort('created', 'DESC') 
    ->range(0, $count);
  $nids= $query->execute();
  return $nids;
}


function as_entity_list_get_people($count,$tags)
{
 //use entity query to look up people nids filtered by research area
  $query = \Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'person')
    ->condition('status', 1)
    ->condition('field_research_areas.entity',$tags)
    ->range(0, $count)
    ->sort('field_person_last_name', 'ASC');
  $nids = $query->execute();
  return $nids;
}

function as_entity_list_get_people_department($count,$tags)
{
 //use entity query to look up people nids filtered by department/program
  if(isset($tags) && $tags != NULL) {
  $tids = explode(',', $tags[0]['tids']);
  $operator = $tags[0]['operator'];
  $sort = $tags[0]['sort'];

  $query = \Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'person')
    ->condition('status', 1);
    if($sort == 'alphabetical'){
      $query->sort('field_person_last_name', 'ASC');
      $query->range(0, $count);
    }
    if($sort == 'random'){
      // get more for random, to make sure it's really random
      $query->range(0, 500);
    }
     
    foreach ($tids as $tid) {
      if($operator == 'and'){
          $query->condition($query->andConditionGroup()
          ->condition('field_departments_programs.entity', $tid));
      }
      if($operator == 'or'){
          $query->condition($query->orConditionGroup()
          ->condition('field_departments_programs.entity', $tid));
      }
    }

    $nids = $query->execute();
  }

  if($sort == 'random'){
    // randomize array
    $random = shuffle($nids);
    // chop back down to requested list size
    $nids = array_slice($nids, 0, $count);
  }
  
  return $nids;
      
}

function as_entity_list_get_people_research($count,$tags)
{
 //use entity query to look up people nids filtered by research area
  $query = \Drupal::entityQuery('node')
    ->accessCheck(TRUE)
    ->condition('type', 'person')
    ->condition('status', 1)
    ->condition('field_research_areas.entity',$tags)
    ->range(0, $count)
    ->sort('field_person_last_name', 'ASC');
  $nids = $query->execute();
  return $nids;
}



function as_entity_list_get_works($count,$tags)
{
 //use entity query to look up nids
    $nids = \Drupal::entityQuery('node')
      ->accessCheck(TRUE)
      ->condition('type', 'work')
      // leave to filter by research area
      //->condition('field_research_areas.entity',$tags)
      ->condition('status', 1)
      ->sort('created', 'DESC') 
      ->range(0, $count)
      ->execute();
  return $nids;
}

function as_entity_list_get_cinevents($count,$tags)
{
 //use entity query to look up nids
    $nids = \Drupal::entityQuery('node')
      ->accessCheck(TRUE)
      ->condition('type', 'cinevent')
      // leave to filter by film series
      //->condition('field_film_series.entity',$tags)
      ->condition('status', 1)
      ->sort('created', 'DESC') 
      ->range(0, $count)
      ->execute();
  return $nids;
}



function as_entity_list_get_terms($type,$count)
{
    //use entity query to look up tids
      
    $tids = \Drupal::entityQuery('taxonomy_term')
      ->accessCheck(TRUE)
      ->condition('vid', $type)
      ->condition('status', 1)
      // exclude parent terms like department names
      ->condition('parent', '0', '<>')
      ->range(0, $count)
      ->execute();
  return $tids;
}



/**
 * Implements hook_help().
 */
function as_entity_list_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    case 'help.as_entity_list':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Lists of people, articles or taxonomy term with selectors for number of items, tag filter, view mode.') . '</p>';

      return $output;
  }
}


